AWSTemplateFormatVersion: '2010-09-09'
Description: 'Low-Latency Trading System on AWS EC2'

Parameters:
  InstanceType:
    Type: String
    Default: c6g.medium
    Description: EC2 instance type
    AllowedValues:
      - t3.medium
      - t3.large
      - c6g.medium
      - c6g.large
      - c5.2xlarge
      - c5.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access

  SSHLocation:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR IP address range for SSH access
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: TradingSystemVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TradingSystemIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TradingSystemPublicSubnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TradingSystemRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # Security Groups
  TradingSystemSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Low-Latency Trading System
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
          Description: Telemetry dashboard
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: 0.0.0.0/0
          Description: Benchmark tool (optional)
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: TradingSystemSecurityGroup

  # IAM Role for EC2
  TradingSystemRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: TradingSystemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                Resource: '*'

  TradingSystemInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref TradingSystemRole

  # EC2 Instance
  TradingSystemInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023 AMI (us-east-1)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref TradingSystemInstanceProfile
      SecurityGroupIds:
        - !Ref TradingSystemSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          
          # Update system
          yum update -y
          
          # Install dependencies
          yum install -y gcc-c++ python3 python3-pip tmux git htop iotop sysstat make cmake3
          
          # Create application directory
          mkdir -p /opt/trading-system
          cd /opt/trading-system
          
          # Clone repository (replace with your actual repo URL)
          # git clone https://github.com/yourusername/low-latency-trading.git .
          
          # For now, we'll create a placeholder
          echo "Trading system deployment completed" > /opt/trading-system/README.txt
          
          # Create startup script
          cat > /opt/trading-system/start-services.sh << 'EOF'
          #!/bin/bash
          echo "Starting Low-Latency Trading System..."
          echo "Please deploy your application files and run:"
          echo "make && ./main"
          echo "cd telemetry && uvicorn metrics:app --host 0.0.0.0 --port 8000"
          EOF
          
          chmod +x /opt/trading-system/start-services.sh
          
          # Install CloudWatch agent
          yum install -y amazon-cloudwatch-agent
          
          # Configure CloudWatch agent
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "metrics": {
              "metrics_collected": {
                "cpu": {
                  "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                  "metrics_collection_interval": 60
                },
                "disk": {
                  "measurement": ["used_percent"],
                  "metrics_collection_interval": 60
                },
                "diskio": {
                  "measurement": ["io_time"],
                  "metrics_collection_interval": 60
                },
                "mem": {
                  "measurement": ["mem_used_percent"],
                  "metrics_collection_interval": 60
                },
                "netstat": {
                  "measurement": ["tcp_established", "tcp_time_wait"],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          
          echo "Setup completed successfully!"
          
      Tags:
        - Key: Name
          Value: Low-Latency Trading System
        - Key: Environment
          Value: Production
        - Key: Project
          Value: TradingSystem

  # CloudWatch Dashboard
  TradingSystemDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: TradingSystemDashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/EC2", "CPUUtilization", "InstanceId", "${TradingSystemInstance}"],
                  [".", "NetworkIn", ".", "."],
                  [".", "NetworkOut", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Trading System Performance"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["CWAgent", "mem_used_percent", "InstanceId", "${TradingSystemInstance}"],
                  [".", "disk_used_percent", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "System Resources"
              }
            }
          ]
        }

Outputs:
  InstanceId:
    Description: Instance ID of the trading system
    Value: !Ref TradingSystemInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  PublicIP:
    Description: Public IP address of the trading system
    Value: !GetAtt TradingSystemInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  PublicDNS:
    Description: Public DNS name of the trading system
    Value: !GetAtt TradingSystemInstance.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-PublicDNS"

  TelemetryURL:
    Description: URL for the telemetry dashboard
    Value: !Sub "http://${TradingSystemInstance.PublicIp}:8000"
    Export:
      Name: !Sub "${AWS::StackName}-TelemetryURL"

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i ${KeyName}.pem ec2-user@${TradingSystemInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-SSHCommand" 